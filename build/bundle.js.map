{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/Toolbar.svelte","../../src/components/icons/Play.svelte","../../src/components/RunButton.svelte","../../src/appComponents/PlaygroundLogo.svelte","../../node_modules/svelte/store/index.mjs","../../src/components/tabs/tabsContext.ts","../../src/components/HorizontalScrollable.svelte","../../src/components/IconButton.svelte","../../src/components/icons/Code.svelte","../../src/components/icons/Plus.svelte","../../src/components/tabs/Tabs.svelte","../../src/components/icons/Cross.svelte","../../src/components/tabs/TabButton.svelte","../../src/components/tabbedEditor/TabbedEditorButtons.svelte","../../src/components/Editor.svelte","../../src/components/tabs/TabContent.svelte","../../src/components/tabbedEditor/TabbedEditorContents.svelte","../../src/components/Expand.svelte","../../src/components/Modal.svelte","../../src/components/TextInput.svelte","../../src/appComponents/About.svelte","../../src/components/CodePreview.svelte","../../src/components/ErrorStatusBadge.svelte","../../src/components/IconAndLabel.svelte","../../src/components/icons/Terminal.svelte","../../src/components/Loading.svelte","../../src/appComponents/OutputPanel.svelte","../../src/appComponents/InputPanel.svelte","../../src/api/cloudCompile.ts","../../src/api/request.ts","../../src/App.svelte","../../src/shnooTalkHelloWorld.ts","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.52.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script context=\"module\" lang=\"ts\">\n    const toolbarClass = [\n        \"box\",\n        \"box-arrange-hor\",\n        \"box-width-full\",\n        \"background-25\",\n        \"box-items-center\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    export let height: number = 48\n</script>\n\n<div class={toolbarClass} style=\"height: {height}px;\">\n    <slot />\n</div>\n","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-play\"\n>\n    <polygon points=\"5 3 19 12 5 21 5 3\" />\n</svg>\n","<script context=\"module\" lang=\"ts\">\n    const buttonClass = [\n        \"box\",\n        \"box-button\",\n        \"box-arrange-hor\",\n        \"box-items-center\",\n        \"box-height-full\",\n        \"pad-vert\",\n        \"pad-hor\",\n        \"box-content-center\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    import Play from \"./icons/Play.svelte\"\n\n    export let onClick: any\n    export let disabled: boolean = false\n    export let expandWidth: boolean = false\n    export let iconWidth: number = 15\n</script>\n\n<button\n    class={buttonClass}\n    class:box-width-full={expandWidth}\n    on:click={onClick}\n    {disabled}\n>\n    <span class=\"box box-items-center\" style=\"width: {iconWidth}px\">\n        <Play />\n    </span>\n    <span class=\"pad-left-small foreground-active\">Run</span>\n</button>\n\n<style>\n    button {\n        background: #059862;\n        stroke: white;\n    }\n\n    button[disabled] {\n        background: #a08000f9 !important;\n    }\n\n    button:hover {\n        background: #04aa6d;\n    }\n</style>\n","<script context=\"module\" lang=\"ts\">\n    const labelClass = [\n        \"box\",\n        \"box-arrange-hor\",\n        \"box-items-center\",\n        \"pad-hor\",\n        \"pad-vert\",\n        \"background-25\",\n        \"foreground-cc\",\n        \"cursor-pointer\",\n        \"hover-background\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    export let onClick: any = undefined\n</script>\n\n<div class={labelClass} on:click={onClick}>\n    <img src=\"icons/logo.svg\" class=\"\" width=\"50px\" alt=\"\" />\n    <span class=\"box\">\n        <span class=\"pad-left-small text-no-wrap\"> ShnooTalk Playground </span>\n    </span>\n</div>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\";\nclass TabsContext {\n    constructor(initialTabs) {\n        this.tabHistory = [];\n        this.currentTab = writable(undefined);\n        this.tabsList = writable(initialTabs);\n    }\n    openTab(tabName) {\n        this.currentTab.set(tabName);\n        this.tabHistory.push(tabName);\n    }\n    closeTab(tabName) {\n        const tabFilter = (elem) => elem != tabName;\n        this.tabHistory = this.tabHistory.filter(tabFilter);\n        this.openTab(this.tabHistory.pop());\n        this.tabsList.update((tabsList) => tabsList.filter(tabFilter));\n    }\n    addTab(tabName) {\n        this.tabsList.update((tabsList) => [...new Set([...tabsList, tabName])]);\n        this.openTab(tabName);\n    }\n}\nexport default TabsContext;\n","<script lang=\"ts\">\n</script>\n\n<div class=\"box scroll-x scroll-hidden box-height-full\">\n    <slot />\n</div>\n","<script context=\"module\" lang=\"ts\">\n    const iconClass = [\n        \"box\",\n        \"box-items-center\",\n        \"box-rounded\",\n        \"hover-background\",\n        \"pad-vert-small\",\n        \"pad-hor-small\",\n        \"foreground-f80\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    export let onClick: any = undefined\n    export let iconWidth: number = 15\n</script>\n\n<button\n    class=\"box-button background-25 box-items-center box-height-full\"\n    on:click={onClick}\n>\n    <span class={iconClass} style=\"width: {iconWidth}px;\">\n        <slot />\n    </span>\n</button>\n","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-code\"\n>\n    <polyline points=\"16 18 22 12 16 6\" />\n    <polyline points=\"8 6 2 12 8 18\" />\n</svg>\n","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-plus\"\n>\n    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n</svg>\n","<script context=\"module\" lang=\"ts\">\n    export const TABS = {}\n</script>\n\n<script lang=\"ts\">\n    import { setContext } from \"svelte\"\n    import type TabsContext from \"./tabsContext\"\n\n    export let ctx: TabsContext\n    setContext(TABS, ctx)\n</script>\n\n<slot />\n","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-x\"\n>\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n</svg>\n","<script context=\"module\" lang=\"ts\">\n    const tabButtonClass = [\n        \"box\",\n        \"box-arrange-hor\",\n        \"box-items-center\",\n        \"box-button\",\n        \"pad-hor\",\n        \"pad-vert\",\n        \"active-background-1e\",\n        \"hover-background-33\",\n        \"background-2d\",\n        \"foreground-f80\",\n        \"active-foreground-cc\",\n        \"box-height-full\",\n    ].join(\" \")\n\n    const tabIconClass = [\n        \"box\",\n        \"box-items-center\",\n        \"box-child-float-right\",\n        \"pad-right-small\",\n        \"foreground-f80\",\n        \"active-foreground-cc\",\n    ].join(\" \")\n\n    const closeIconClass = [\n        \"box\",\n        \"box-items-center\",\n        \"box-rounded\",\n        \"foreground-f80\",\n        \"hover-background\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    import { getContext } from \"svelte\"\n    import { onMount, onDestroy } from \"svelte\"\n    import { TABS } from \"./Tabs.svelte\"\n    import type TabsContext from \"./tabsContext\"\n    import Cross from \"../icons/Cross.svelte\"\n\n    export let tabIconWidth: number = 15\n    export let minWidth: number = 120\n    export let onClose: (tabName: string) => void | undefined = undefined\n    export let tabName: string\n\n    const ctx: TabsContext = getContext(TABS)\n    const currentTab = ctx.currentTab\n\n    onMount(() => {\n        ctx.openTab(tabName)\n    })\n\n    onDestroy(() => {\n        ctx.closeTab(tabName)\n    })\n</script>\n\n<button\n    class={tabButtonClass}\n    class:active={$currentTab == tabName}\n    style=\"min-width: {minWidth}px;\"\n    on:click|preventDefault={() => {\n        ctx.openTab(tabName)\n    }}\n>\n    <span\n        class={tabIconClass}\n        class:active={$currentTab == tabName}\n        style=\"width: {tabIconWidth}px;\"\n    >\n        <slot />\n    </span>\n\n    <span class=\"text-overflow-ellipses text-no-wrap\">{tabName}</span>\n\n    {#if onClose}\n        <span class=\"box-child-float-right pad-left\" />\n        <span\n            class={closeIconClass}\n            style=\"width: {tabIconWidth}px;\"\n            on:click={() => {\n                onClose(tabName)\n            }}\n        >\n            <Cross />\n        </span>\n    {/if}\n</button>\n","<script lang=\"ts\">\n    import { createEventDispatcher } from \"svelte\"\n    import HorizontalScrollable from \"../HorizontalScrollable.svelte\"\n    import IconButton from \"../IconButton.svelte\"\n    import Code from \"../icons/Code.svelte\"\n    import Plus from \"../icons/Plus.svelte\"\n    import TabButton from \"../tabs/TabButton.svelte\"\n    import Tabs from \"../tabs/Tabs.svelte\"\n    import type TabsContext from \"../tabs/tabsContext\"\n\n    export let ctx: TabsContext\n\n    const dispatch = createEventDispatcher()\n    const tabsList = ctx.tabsList\n\n    export function addTab(tabName: string) {\n        ctx.addTab(tabName)\n    }\n</script>\n\n<Tabs {ctx}>\n    <HorizontalScrollable>\n        <div class=\"box box-arrange-hor box-height-full bax-arrange-gap\">\n            <TabButton tabName={$tabsList[0]}>\n                <Code />\n            </TabButton>\n            {#each $tabsList.slice(1) as tabName}\n                <TabButton {tabName} onClose={() => ctx.closeTab(tabName)}>\n                    <Code />\n                </TabButton>\n            {/each}\n        </div>\n    </HorizontalScrollable>\n\n    <IconButton onClick={() => dispatch(\"newTab\")}>\n        <Plus />\n    </IconButton>\n</Tabs>\n","<script context=\"module\" lang=\"ts\">\n    // @ts-ignore\n    window.ace.config.set(\"basePath\", \"/\")\n</script>\n\n<script lang=\"ts\">\n    import { onDestroy, onMount } from \"svelte\"\n    export let fontSize: number\n    export let editorId: string\n\n    let editor: any = undefined\n\n    onMount(() => {\n        // @ts-ignore\n        editor = window.ace.edit(editorId)\n        editor.setTheme(\"ace/theme/vscode\")\n        editor.session.setMode(\"ace/mode/shnootalk\")\n        editor.setFontSize(fontSize)\n        editor.setShowPrintMargin(false)\n        editor.setHighlightActiveLine(false)\n    })\n\n    onDestroy(() => {\n        if (editor) editor.destroy()\n    })\n\n    export function focus() {\n        // set timeout so the editor does not capture key events like the enter key\n        // there is no other way to do this\n        setTimeout(() => editor.focus(), 1)\n    }\n\n    export function getValue(): string {\n        return editor.getValue()\n    }\n\n    export function setValue(content: string) {\n        editor.setValue(content, 1)\n    }\n</script>\n\n<div class=\"box-height-full box-width-full\" id={editorId} />\n","<script lang=\"ts\">\n    import { afterUpdate, getContext, createEventDispatcher } from \"svelte\"\n    import { TABS } from \"./Tabs.svelte\"\n    import type TabsContext from \"./tabsContext\"\n\n    export let tabName: string\n\n    const dispatch = createEventDispatcher()\n    const ctx: TabsContext = getContext(TABS)\n    const currentTab = ctx.currentTab\n\n    afterUpdate(() => {\n        if ($currentTab === tabName) dispatch(\"appear\")\n    })\n</script>\n\n<div class:box-display-none={$currentTab !== tabName} class=\"box-child-grow\">\n    <slot />\n</div>\n","<script lang=\"ts\">\n    import Tabs from \"../tabs/Tabs.svelte\"\n    import Editor from \"../Editor.svelte\"\n    import TabContent from \"../tabs/TabContent.svelte\"\n    import type TabsContext from \"../tabs/tabsContext\"\n\n    export let fontSize: number = 17\n    export let ctx: TabsContext\n\n    const tabsList = ctx.tabsList\n    const currentTab = ctx.currentTab\n    const editors: { [key: string]: Editor } = {}\n\n    export function focus() {\n        if (editors[$currentTab]) editors[$currentTab].focus()\n    }\n\n    export function getContents() {\n        const contents: { [key: string]: string } = {}\n\n        for (let tabName of $tabsList) {\n            contents[tabName] = editors[tabName].getValue()\n        }\n\n        return contents\n    }\n\n    export function setContent(tabName: string, content: string) {\n        editors[tabName].setValue(content)\n    }\n</script>\n\n<Tabs {ctx}>\n    {#each $tabsList as tabName}\n        <TabContent {tabName} on:appear={focus}>\n            <Editor\n                {fontSize}\n                editorId={tabName}\n                bind:this={editors[tabName]}\n            />\n        </TabContent>\n    {/each}\n</Tabs>\n","<span class=\"box-child-grow\" />\n","<script lang=\"ts\">\n    export let width: number\n    export let onClose: () => void = undefined\n\n    let showModal = false\n\n    export function openModal() {\n        showModal = true\n    }\n\n    export function closeModal() {\n        showModal = false\n        onClose()\n    }\n</script>\n\n<div\n    class=\"box box-modal-background box-arrange-hor\"\n    class:box-display-none={!showModal}\n    on:click={closeModal}\n>\n    <div\n        class=\"box box-modal-window background-25 pad-hor\"\n        style=\"width: {width}%;\"\n        on:click|stopPropagation\n    >\n        <slot />\n    </div>\n</div>\n","<script lang=\"ts\">\n    import { tick } from \"svelte\"\n\n    export let label: string\n    export let onEnterCallback: (value: string) => void\n\n    let inputEl: HTMLInputElement\n\n    function onKeyDown(event: any) {\n        if (event.key !== \"Enter\" || event.target.value.length === 0) return\n        onEnterCallback(event.target.value)\n        event.target.value = \"\"\n    }\n\n    export async function focus() {\n        await tick()\n        inputEl.focus()\n    }\n\n    export function clear() {\n        inputEl.value = \"\"\n    }\n</script>\n\n<span class=\"foreground-cc font-small pad-vert-small\">{label}</span>\n<span class=\"pad-bottom-small\">\n    <input\n        class=\"background-1e box-width-full foreground-cc\"\n        type=\"text\"\n        bind:this={inputEl}\n        on:keydown={onKeyDown}\n    />\n</span>\n","<div class=\"box box-items-center background-25 pad-hor pad-vert\">\n    <img src=\"icons/cloud-compile.png\" width=\"128px\" alt=\"\" />\n    <span class=\"foreground-cc font-small pad-vert font-x-large\">\n        ShnooTalk Playground\n    </span>\n    <div class=\"box font-small box-items-center pad-hor\">\n        <a\n            href=\"https://github.com/RainingComputers/ShnooTalk\"\n            class=\"foreground-cc text-no-wrap\"\n            target=\"_blank\"\n        >\n            github.com/RainingComputers/ShnooTalk\n        </a>\n\n        <a\n            href=\"https://github.com/RainingComputers/shnootalk-playground\"\n            class=\"foreground-cc text-no-wrap\"\n            target=\"_blank\"\n        >\n            github.com/RainingComputers/shnootalk-playground\n        </a>\n\n        <span\n            class=\"foreground-f80 text-no-wrap foreground-f80 pad-vert\"\n            style=\"font-size: xx-small;\"\n        >\n            © Copyrights 2021 RainingComputers\n        </span>\n    </div>\n</div>\n","<script context=\"module\" lang=\"ts\">\n    const codePreviewClass = [\n        \"box\",\n        \"box-height-75\",\n        \"pad-hor\",\n        \"scroll-x\",\n        \"scroll-y\",\n        \"scroll-hidden\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    export let output: string = \"\"\n</script>\n\n<pre class={codePreviewClass}>\n    <code class=\"foreground-cc\">\n{output}\n    </code>\n</pre>\n","<script lang=\"ts\">\n    export let error: boolean = false\n    export let ok: boolean = false\n</script>\n\n{#if ok}\n    <span class=\"pad-hor pad-vert foreground-green font-small text-bold\">\n        OK\n    </span>\n{/if}\n\n{#if error}\n    <span class=\"pad-hor pad-vert foreground-red font-small text-bold\">\n        ERROR\n    </span>\n{/if}\n\n<style>\n    .foreground-green {\n        color: green;\n    }\n\n    .foreground-red {\n        color: red;\n    }\n</style>\n","<script lang=\"ts\">\n    export let iconWidth: number = 16\n    export let label: string\n</script>\n\n<div class=\"box box-arrange-hor box-items-center\">\n    <span\n        class=\"box box-items-center pad-left foreground-f80\"\n        style=\"width: {iconWidth}px;\"\n    >\n        <slot />\n    </span>\n    <span class=\" pad-hor pad-vert foreground-cc font-small\">\n        {label}\n    </span>\n</div>\n","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-terminal\"\n>\n    <polyline points=\"4 17 10 11 4 5\" />\n    <line x1=\"12\" y1=\"19\" x2=\"20\" y2=\"19\" />\n</svg>\n","<script lang=\"ts\">\n    let size: number = 50\n</script>\n\n<div class=\"pad-vert\">\n    <div class=\"loader\" style=\"width: {size}px; height: {size}px;\" />\n</div>\n","<script lang=\"ts\">\n    import CodePreview from \"../components/CodePreview.svelte\"\n    import ErrorStatusBadge from \"../components/ErrorStatusBadge.svelte\"\n    import IconAndLabel from \"../components/IconAndLabel.svelte\"\n    import Terminal from \"../components/icons/Terminal.svelte\"\n    import Loading from \"../components/Loading.svelte\"\n\n    export let output: string = \"\"\n    export let loading: boolean = false\n    export let ok: boolean = false\n    export let error: boolean = false\n</script>\n\n<div class=\"box box-arrange-hor\">\n    <IconAndLabel label=\"OUTPUT\">\n        <Terminal />\n    </IconAndLabel>\n    <span class=\"box-child-grow\" />\n    <ErrorStatusBadge {error} {ok} />\n</div>\n\n{#if loading}\n    <div class=\"box box-items-center box-height-75 box-width-full\">\n        <Loading />\n        <span class=\"pad-vert foreground-f80 font-small\"> Compiling </span>\n    </div>\n{:else}\n    <CodePreview {output} />\n{/if}\n","<script context=\"module\" lang=\"ts\">\n    const textAreaClass = [\n        \"box-height-full\",\n        \"background-2d\",\n        \"foreground-cc\",\n        \"placeholder-foreground-f80\",\n        \"pad-hor\",\n    ].join(\" \")\n</script>\n\n<script lang=\"ts\">\n    import IconAndLabel from \"../components/IconAndLabel.svelte\"\n    import Terminal from \"../components/icons/Terminal.svelte\"\n\n    let textArea: HTMLTextAreaElement\n\n    export function getInput() {\n        return textArea.value\n    }\n</script>\n\n<div class=\"box box-width-full border-top-37 box-height-quarter\">\n    <IconAndLabel label=\"INPUT\">\n        <Terminal />\n    </IconAndLabel>\n    <textarea\n        class={textAreaClass}\n        placeholder=\"Enter input here\"\n        bind:this={textArea}\n    />\n</div>\n","import { makeRequest } from \"./request\";\nconst SERVER_URL = \"https://shnootalk.cc/shnootalk-playground/api/v2/compile\";\nexport var CompileResult;\n(function (CompileResult) {\n    CompileResult[\"EXEC_TIMEDOUT\"] = \"EXEC_TIMEDOUT\";\n    CompileResult[\"CLANG_LINK_TIMEDOUT\"] = \"CLANG_LINK_TIMEDOUT\";\n    CompileResult[\"CLANG_LINK_FAILED\"] = \"CLANG_LINK_FAILED\";\n    CompileResult[\"COMPILE_FAILED\"] = \"COMPILE_FAILED\";\n    CompileResult[\"COMPILE_TIMEDOUT\"] = \"COMPILE_TIMEDOUT\";\n    CompileResult[\"SUCCESS\"] = \"SUCCESS\";\n})(CompileResult || (CompileResult = {}));\nconst SOMETHING_WENT_WRONG = {\n    output: \"Something went wrong, please try again later\",\n    result: CompileResult.COMPILE_FAILED,\n};\nconst TIMED_OUT = {\n    output: \"Execution has timed out or the server is overloaded\",\n    result: CompileResult.EXEC_TIMEDOUT,\n};\nconst INVALID_FILE_NAMES = {\n    output: \"File names should end with the extension '.shtk'\",\n    result: CompileResult.COMPILE_FAILED,\n};\nexport function validateFileNames(programs) {\n    for (const name in programs) {\n        if (name == \"input\")\n            continue;\n        if (!name.match(/\\w+.shtk/))\n            return false;\n    }\n    return true;\n}\nexport async function makeCompileRequest(programs) {\n    try {\n        if (!validateFileNames(programs))\n            return INVALID_FILE_NAMES;\n        const response = await makeRequest(SERVER_URL, \"post\", programs);\n        if (response.result === CompileResult.EXEC_TIMEDOUT ||\n            response.result === CompileResult.CLANG_LINK_TIMEDOUT)\n            return TIMED_OUT;\n        return response;\n    }\n    catch (_a) {\n        return SOMETHING_WENT_WRONG;\n    }\n}\n","function ensureStatusOK(response) {\n    if (response.status !== 200)\n        throw { error: \"response not OK\", context: response };\n}\nexport async function makeRequest(url, method, body = undefined) {\n    let requestOptions = { method };\n    if (body)\n        requestOptions = {\n            method,\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n        };\n    const response = await fetch(url, requestOptions);\n    ensureStatusOK(response);\n    return response.json();\n}\n","<script lang=\"ts\">\n    import { onMount } from \"svelte\"\n    import helloWorldProgram from \"./shnooTalkHelloWorld\"\n    import Toolbar from \"./components/Toolbar.svelte\"\n    import RunButton from \"./components/RunButton.svelte\"\n    import PlaygroundLogo from \"./appComponents/PlaygroundLogo.svelte\"\n    import TabsContext from \"./components/tabs/tabsContext\"\n    import TabbedEditorButtons from \"./components/tabbedEditor/TabbedEditorButtons.svelte\"\n    import TabbedEditorContents from \"./components/tabbedEditor/TabbedEditorContents.svelte\"\n    import Expand from \"./components/Expand.svelte\"\n    import Modal from \"./components/Modal.svelte\"\n    import TextInput from \"./components/TextInput.svelte\"\n    import About from \"./appComponents/About.svelte\"\n    import OutputPanel from \"./appComponents/OutputPanel.svelte\"\n    import InputPanel from \"./appComponents/InputPanel.svelte\"\n    import { CompileResult, makeCompileRequest } from \"./api/cloudCompile\"\n\n    const tabbedEditorContext = new TabsContext([\"main.shtk\"])\n    let output: string = \"\"\n    let loading: boolean = false\n    let ok: boolean = false\n    let error: boolean = false\n\n    let newTabModal: Modal\n    let aboutModal: Modal\n    let tabbedEditorButtons: TabbedEditorButtons\n    let tabbedEditrorContents: TabbedEditorContents\n    let newTabTextInput: TextInput\n    let inputPanel: InputPanel\n\n    function openNewTabModal() {\n        newTabModal.openModal()\n        newTabTextInput.focus()\n    }\n\n    function closeNewTabModalAndCreateTab(value: string) {\n        newTabModal.closeModal()\n        tabbedEditorButtons.addTab(value)\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n        if (event.key !== \"Escape\") return\n\n        newTabModal.closeModal()\n        aboutModal.closeModal()\n        newTabTextInput.clear()\n        tabbedEditrorContents.focus()\n        event.preventDefault()\n    }\n\n    async function startCompile() {\n        const programs = {\n            ...tabbedEditrorContents.getContents(),\n            input: inputPanel.getInput(),\n        }\n\n        loading = true\n\n        const response = await makeCompileRequest(programs)\n        const result = response.result\n        output = response.output\n        ok = result === CompileResult.SUCCESS\n        error = !ok\n\n        loading = false\n    }\n\n    onMount(() => {\n        tabbedEditrorContents.setContent(\"main.shtk\", helloWorldProgram)\n        tabbedEditrorContents.focus()\n    })\n</script>\n\n<svelte:window on:keydown={onKeyDown} />\n\n<main class=\"box-root\">\n    <Modal\n        width={25}\n        bind:this={newTabModal}\n        onClose={() => {\n            tabbedEditrorContents.focus()\n        }}\n    >\n        <TextInput\n            label=\"Enter name\"\n            bind:this={newTabTextInput}\n            onEnterCallback={closeNewTabModalAndCreateTab}\n        />\n    </Modal>\n\n    <Modal\n        width={30}\n        bind:this={aboutModal}\n        onClose={() => {\n            tabbedEditrorContents.focus()\n        }}\n    >\n        <About />\n    </Modal>\n\n    <Toolbar>\n        <TabbedEditorButtons\n            ctx={tabbedEditorContext}\n            bind:this={tabbedEditorButtons}\n            on:newTab={openNewTabModal}\n        />\n        <Expand />\n        <PlaygroundLogo onClick={() => aboutModal.openModal()} />\n        <RunButton onClick={startCompile} disabled={loading} />\n    </Toolbar>\n\n    <div class=\"box box-arrange-hor box-width-full box-height-full\">\n        <TabbedEditorContents\n            ctx={tabbedEditorContext}\n            fontSize={17}\n            bind:this={tabbedEditrorContents}\n        />\n\n        <div class=\"box background-2d box-width-35\">\n            <OutputPanel {output} {loading} {ok} {error} />\n            <InputPanel bind:this={inputPanel} />\n        </div>\n    </div>\n</main>\n","export const helloWorldProgram = `fn main() -> int\n{\n    println(\"Hello world\")\n    return 0\n}\n`;\nexport default helloWorldProgram;\n","import App from \"./App.svelte\";\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","set_current_component","get_current_component","Error","onMount","on_mount","onDestroy","createEventDispatcher","type","detail","cancelable","bubbles","e","createEvent","initCustomEvent","custom_event","call","defaultPrevented","getContext","context","get","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","seen_callbacks","Set","flushidx","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","Map","skip_bound","root","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","toolbarClass","join","height","buttonClass","onClick","disabled","expandWidth","iconWidth","element_src","url","href","labelClass","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","TabsContext","constructor","initialTabs","tabHistory","currentTab","tabsList","openTab","tabName","closeTab","tabFilter","elem","addTab","iconClass","TABS","closeIconClass","tabIconClass","tabButtonClass","preventDefault","tabIconWidth","minWidth","onClose","dispatch","editor","fontSize","editorId","window","ace","edit","setTheme","session","setMode","setFontSize","setShowPrintMargin","setHighlightActiveLine","destroy","setTimeout","focus","getValue","content","setValue","config","$currentTab","editors","contents","$tabsList","stopPropagation","width","showModal","inputEl","label","onEnterCallback","codePreviewClass","output","error","ok","loading","textAreaClass","textArea","CompileResult","SOMETHING_WENT_WRONG","result","COMPILE_FAILED","TIMED_OUT","EXEC_TIMEDOUT","INVALID_FILE_NAMES","async","makeCompileRequest","programs","match","validateFileNames","response","method","body","requestOptions","headers","JSON","stringify","fetch","status","ensureStatusOK","json","makeRequest","CLANG_LINK_TIMEDOUT","_a","tabbedEditorContext","newTabModal","aboutModal","tabbedEditorButtons","tabbedEditrorContents","newTabTextInput","inputPanel","setContent","openModal","closeModal","getContents","input","getInput","SUCCESS"],"mappings":"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"}